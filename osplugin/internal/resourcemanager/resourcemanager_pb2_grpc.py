# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from internal.resourcemanager import resourcemanager_pb2 as resourcemanager__pb2


class VmImageMangerStub(object):
    """resource manager entity end

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createVmImage = channel.unary_unary(
                '/internal.resourcemanager.VmImageManger/createVmImage',
                request_serializer=resourcemanager__pb2.CreateVmImageRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.CreateVmImageResponse.FromString,
                )
        self.uploadVmImage = channel.stream_unary(
                '/internal.resourcemanager.VmImageManger/uploadVmImage',
                request_serializer=resourcemanager__pb2.UploadVmImageRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.UploadVmImageResponse.FromString,
                )
        self.deleteVmImage = channel.unary_unary(
                '/internal.resourcemanager.VmImageManger/deleteVmImage',
                request_serializer=resourcemanager__pb2.DeleteVmImageRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.DeleteVmImageResponse.FromString,
                )
        self.downloadVmImage = channel.unary_stream(
                '/internal.resourcemanager.VmImageManger/downloadVmImage',
                request_serializer=resourcemanager__pb2.DownloadVmImageRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.DownloadVmImageResponse.FromString,
                )
        self.importVmImage = channel.unary_unary(
                '/internal.resourcemanager.VmImageManger/importVmImage',
                request_serializer=resourcemanager__pb2.ImportVmImageRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.ImportVmImageResponse.FromString,
                )
        self.queryVmImage = channel.unary_unary(
                '/internal.resourcemanager.VmImageManger/queryVmImage',
                request_serializer=resourcemanager__pb2.QueryVmImageRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.QueryVmImageResponse.FromString,
                )


class VmImageMangerServicer(object):
    """resource manager entity end

    """

    def createVmImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadVmImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteVmImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def downloadVmImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def importVmImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryVmImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VmImageMangerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createVmImage': grpc.unary_unary_rpc_method_handler(
                    servicer.createVmImage,
                    request_deserializer=resourcemanager__pb2.CreateVmImageRequest.FromString,
                    response_serializer=resourcemanager__pb2.CreateVmImageResponse.SerializeToString,
            ),
            'uploadVmImage': grpc.stream_unary_rpc_method_handler(
                    servicer.uploadVmImage,
                    request_deserializer=resourcemanager__pb2.UploadVmImageRequest.FromString,
                    response_serializer=resourcemanager__pb2.UploadVmImageResponse.SerializeToString,
            ),
            'deleteVmImage': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteVmImage,
                    request_deserializer=resourcemanager__pb2.DeleteVmImageRequest.FromString,
                    response_serializer=resourcemanager__pb2.DeleteVmImageResponse.SerializeToString,
            ),
            'downloadVmImage': grpc.unary_stream_rpc_method_handler(
                    servicer.downloadVmImage,
                    request_deserializer=resourcemanager__pb2.DownloadVmImageRequest.FromString,
                    response_serializer=resourcemanager__pb2.DownloadVmImageResponse.SerializeToString,
            ),
            'importVmImage': grpc.unary_unary_rpc_method_handler(
                    servicer.importVmImage,
                    request_deserializer=resourcemanager__pb2.ImportVmImageRequest.FromString,
                    response_serializer=resourcemanager__pb2.ImportVmImageResponse.SerializeToString,
            ),
            'queryVmImage': grpc.unary_unary_rpc_method_handler(
                    servicer.queryVmImage,
                    request_deserializer=resourcemanager__pb2.QueryVmImageRequest.FromString,
                    response_serializer=resourcemanager__pb2.QueryVmImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'internal.resourcemanager.VmImageManger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VmImageManger(object):
    """resource manager entity end

    """

    @staticmethod
    def createVmImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmImageManger/createVmImage',
            resourcemanager__pb2.CreateVmImageRequest.SerializeToString,
            resourcemanager__pb2.CreateVmImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def uploadVmImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/internal.resourcemanager.VmImageManger/uploadVmImage',
            resourcemanager__pb2.UploadVmImageRequest.SerializeToString,
            resourcemanager__pb2.UploadVmImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteVmImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmImageManger/deleteVmImage',
            resourcemanager__pb2.DeleteVmImageRequest.SerializeToString,
            resourcemanager__pb2.DeleteVmImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def downloadVmImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/internal.resourcemanager.VmImageManger/downloadVmImage',
            resourcemanager__pb2.DownloadVmImageRequest.SerializeToString,
            resourcemanager__pb2.DownloadVmImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def importVmImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmImageManger/importVmImage',
            resourcemanager__pb2.ImportVmImageRequest.SerializeToString,
            resourcemanager__pb2.ImportVmImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryVmImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmImageManger/queryVmImage',
            resourcemanager__pb2.QueryVmImageRequest.SerializeToString,
            resourcemanager__pb2.QueryVmImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VmManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createVm = channel.unary_unary(
                '/internal.resourcemanager.VmManager/createVm',
                request_serializer=resourcemanager__pb2.CreateVmRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.CreateVmResponse.FromString,
                )
        self.queryVm = channel.unary_unary(
                '/internal.resourcemanager.VmManager/queryVm',
                request_serializer=resourcemanager__pb2.QueryVmRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.QueryVmResponse.FromString,
                )
        self.operateVm = channel.unary_unary(
                '/internal.resourcemanager.VmManager/operateVm',
                request_serializer=resourcemanager__pb2.OperateVmRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.OperateVmResponse.FromString,
                )
        self.deleteVm = channel.unary_unary(
                '/internal.resourcemanager.VmManager/deleteVm',
                request_serializer=resourcemanager__pb2.DeleteVmRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.DeleteVmResponse.FromString,
                )


class VmManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def operateVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteVm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VmManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createVm': grpc.unary_unary_rpc_method_handler(
                    servicer.createVm,
                    request_deserializer=resourcemanager__pb2.CreateVmRequest.FromString,
                    response_serializer=resourcemanager__pb2.CreateVmResponse.SerializeToString,
            ),
            'queryVm': grpc.unary_unary_rpc_method_handler(
                    servicer.queryVm,
                    request_deserializer=resourcemanager__pb2.QueryVmRequest.FromString,
                    response_serializer=resourcemanager__pb2.QueryVmResponse.SerializeToString,
            ),
            'operateVm': grpc.unary_unary_rpc_method_handler(
                    servicer.operateVm,
                    request_deserializer=resourcemanager__pb2.OperateVmRequest.FromString,
                    response_serializer=resourcemanager__pb2.OperateVmResponse.SerializeToString,
            ),
            'deleteVm': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteVm,
                    request_deserializer=resourcemanager__pb2.DeleteVmRequest.FromString,
                    response_serializer=resourcemanager__pb2.DeleteVmResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'internal.resourcemanager.VmManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VmManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmManager/createVm',
            resourcemanager__pb2.CreateVmRequest.SerializeToString,
            resourcemanager__pb2.CreateVmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmManager/queryVm',
            resourcemanager__pb2.QueryVmRequest.SerializeToString,
            resourcemanager__pb2.QueryVmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def operateVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmManager/operateVm',
            resourcemanager__pb2.OperateVmRequest.SerializeToString,
            resourcemanager__pb2.OperateVmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteVm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.VmManager/deleteVm',
            resourcemanager__pb2.DeleteVmRequest.SerializeToString,
            resourcemanager__pb2.DeleteVmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlavorManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createFlavor = channel.unary_unary(
                '/internal.resourcemanager.FlavorManager/createFlavor',
                request_serializer=resourcemanager__pb2.CreateFlavorRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.CreateFlavorResponse.FromString,
                )
        self.deleteFlavor = channel.unary_unary(
                '/internal.resourcemanager.FlavorManager/deleteFlavor',
                request_serializer=resourcemanager__pb2.DeleteFlavorRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.DeleteFlavorResponse.FromString,
                )
        self.queryFlavor = channel.unary_unary(
                '/internal.resourcemanager.FlavorManager/queryFlavor',
                request_serializer=resourcemanager__pb2.QueryFlavorRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.QueryFlavorResponse.FromString,
                )


class FlavorManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createFlavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteFlavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryFlavor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlavorManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createFlavor': grpc.unary_unary_rpc_method_handler(
                    servicer.createFlavor,
                    request_deserializer=resourcemanager__pb2.CreateFlavorRequest.FromString,
                    response_serializer=resourcemanager__pb2.CreateFlavorResponse.SerializeToString,
            ),
            'deleteFlavor': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteFlavor,
                    request_deserializer=resourcemanager__pb2.DeleteFlavorRequest.FromString,
                    response_serializer=resourcemanager__pb2.DeleteFlavorResponse.SerializeToString,
            ),
            'queryFlavor': grpc.unary_unary_rpc_method_handler(
                    servicer.queryFlavor,
                    request_deserializer=resourcemanager__pb2.QueryFlavorRequest.FromString,
                    response_serializer=resourcemanager__pb2.QueryFlavorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'internal.resourcemanager.FlavorManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlavorManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createFlavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.FlavorManager/createFlavor',
            resourcemanager__pb2.CreateFlavorRequest.SerializeToString,
            resourcemanager__pb2.CreateFlavorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteFlavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.FlavorManager/deleteFlavor',
            resourcemanager__pb2.DeleteFlavorRequest.SerializeToString,
            resourcemanager__pb2.DeleteFlavorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryFlavor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.FlavorManager/queryFlavor',
            resourcemanager__pb2.QueryFlavorRequest.SerializeToString,
            resourcemanager__pb2.QueryFlavorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NetworkManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createNetwork = channel.unary_unary(
                '/internal.resourcemanager.NetworkManager/createNetwork',
                request_serializer=resourcemanager__pb2.CreateNetworkRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.CreateNetworkResponse.FromString,
                )
        self.deleteNetwork = channel.unary_unary(
                '/internal.resourcemanager.NetworkManager/deleteNetwork',
                request_serializer=resourcemanager__pb2.DeleteNetworkRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.DeleteNetworkResponse.FromString,
                )
        self.queryNetwork = channel.unary_unary(
                '/internal.resourcemanager.NetworkManager/queryNetwork',
                request_serializer=resourcemanager__pb2.QueryNetworkRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.QueryNetworkResponse.FromString,
                )


class NetworkManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.createNetwork,
                    request_deserializer=resourcemanager__pb2.CreateNetworkRequest.FromString,
                    response_serializer=resourcemanager__pb2.CreateNetworkResponse.SerializeToString,
            ),
            'deleteNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteNetwork,
                    request_deserializer=resourcemanager__pb2.DeleteNetworkRequest.FromString,
                    response_serializer=resourcemanager__pb2.DeleteNetworkResponse.SerializeToString,
            ),
            'queryNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.queryNetwork,
                    request_deserializer=resourcemanager__pb2.QueryNetworkRequest.FromString,
                    response_serializer=resourcemanager__pb2.QueryNetworkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'internal.resourcemanager.NetworkManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NetworkManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.NetworkManager/createNetwork',
            resourcemanager__pb2.CreateNetworkRequest.SerializeToString,
            resourcemanager__pb2.CreateNetworkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.NetworkManager/deleteNetwork',
            resourcemanager__pb2.DeleteNetworkRequest.SerializeToString,
            resourcemanager__pb2.DeleteNetworkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.NetworkManager/queryNetwork',
            resourcemanager__pb2.QueryNetworkRequest.SerializeToString,
            resourcemanager__pb2.QueryNetworkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SecurityGroupManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createSecurityGroup = channel.unary_unary(
                '/internal.resourcemanager.SecurityGroupManager/createSecurityGroup',
                request_serializer=resourcemanager__pb2.CreateSecurityGroupRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.CreateSecurityGroupResponse.FromString,
                )
        self.deleteSecurityGroup = channel.unary_unary(
                '/internal.resourcemanager.SecurityGroupManager/deleteSecurityGroup',
                request_serializer=resourcemanager__pb2.DeleteSecurityGroupRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.DeleteSecurityGroupResponse.FromString,
                )
        self.querySecurityGroup = channel.unary_unary(
                '/internal.resourcemanager.SecurityGroupManager/querySecurityGroup',
                request_serializer=resourcemanager__pb2.QuerySecurityGroupRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.QuerySecurityGroupResponse.FromString,
                )
        self.createSecurityGroupRule = channel.unary_unary(
                '/internal.resourcemanager.SecurityGroupManager/createSecurityGroupRule',
                request_serializer=resourcemanager__pb2.CreateSecurityGroupRuleRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.CreateSecurityGroupRuleResponse.FromString,
                )
        self.deleteSecurityGroupRule = channel.unary_unary(
                '/internal.resourcemanager.SecurityGroupManager/deleteSecurityGroupRule',
                request_serializer=resourcemanager__pb2.DeleteSecurityGroupRuleRequest.SerializeToString,
                response_deserializer=resourcemanager__pb2.DeleteSecurityGroupRuleResponse.FromString,
                )


class SecurityGroupManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createSecurityGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteSecurityGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def querySecurityGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createSecurityGroupRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteSecurityGroupRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecurityGroupManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createSecurityGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.createSecurityGroup,
                    request_deserializer=resourcemanager__pb2.CreateSecurityGroupRequest.FromString,
                    response_serializer=resourcemanager__pb2.CreateSecurityGroupResponse.SerializeToString,
            ),
            'deleteSecurityGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteSecurityGroup,
                    request_deserializer=resourcemanager__pb2.DeleteSecurityGroupRequest.FromString,
                    response_serializer=resourcemanager__pb2.DeleteSecurityGroupResponse.SerializeToString,
            ),
            'querySecurityGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.querySecurityGroup,
                    request_deserializer=resourcemanager__pb2.QuerySecurityGroupRequest.FromString,
                    response_serializer=resourcemanager__pb2.QuerySecurityGroupResponse.SerializeToString,
            ),
            'createSecurityGroupRule': grpc.unary_unary_rpc_method_handler(
                    servicer.createSecurityGroupRule,
                    request_deserializer=resourcemanager__pb2.CreateSecurityGroupRuleRequest.FromString,
                    response_serializer=resourcemanager__pb2.CreateSecurityGroupRuleResponse.SerializeToString,
            ),
            'deleteSecurityGroupRule': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteSecurityGroupRule,
                    request_deserializer=resourcemanager__pb2.DeleteSecurityGroupRuleRequest.FromString,
                    response_serializer=resourcemanager__pb2.DeleteSecurityGroupRuleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'internal.resourcemanager.SecurityGroupManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SecurityGroupManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createSecurityGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.SecurityGroupManager/createSecurityGroup',
            resourcemanager__pb2.CreateSecurityGroupRequest.SerializeToString,
            resourcemanager__pb2.CreateSecurityGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteSecurityGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.SecurityGroupManager/deleteSecurityGroup',
            resourcemanager__pb2.DeleteSecurityGroupRequest.SerializeToString,
            resourcemanager__pb2.DeleteSecurityGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def querySecurityGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.SecurityGroupManager/querySecurityGroup',
            resourcemanager__pb2.QuerySecurityGroupRequest.SerializeToString,
            resourcemanager__pb2.QuerySecurityGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createSecurityGroupRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.SecurityGroupManager/createSecurityGroupRule',
            resourcemanager__pb2.CreateSecurityGroupRuleRequest.SerializeToString,
            resourcemanager__pb2.CreateSecurityGroupRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteSecurityGroupRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal.resourcemanager.SecurityGroupManager/deleteSecurityGroupRule',
            resourcemanager__pb2.DeleteSecurityGroupRuleRequest.SerializeToString,
            resourcemanager__pb2.DeleteSecurityGroupRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
