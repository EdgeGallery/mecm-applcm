// Copyright 2020 Huawei Technologies Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lcmservice;

message InstantiateRequest {
  string accessToken = 1;
  string tenantId = 2;
  string appInstanceId = 3;
  string appPackageId = 4;
  string hostIp = 5;
  map<string,string> parameters = 6;
  bool akSkLcmGen = 7;
}

message InstantiateResponse {
  string status = 1;
}

message TerminateRequest {
  string accessToken = 1;
  string appInstanceId = 2;
  string hostIp = 3;
}

message TerminateResponse {
  string status = 1;
}

message QueryRequest {
  string accessToken = 1;
  string appInstanceId = 2;
  string hostIp = 3;
}

message QueryResponse {
  string response = 1;
}

message QueryKPIRequest {
    string accessToken = 1;
    string hostIp = 2;
}

message QueryKPIResponse {
  string response = 1;
}

message QueryPackageStatusRequest {
  string accessToken = 1;
  string hostIp = 2;
  string packageId = 3;
}

message QueryPackageStatusResponse {
  string response = 1;
}

message UploadCfgRequest {
  oneof data {
    string accessToken = 1;
    string hostIp = 2;
    bytes configFile = 3;
  };
}

message UploadCfgResponse {
  string status = 1;
}

message RemoveCfgRequest {
  string accessToken = 1;
  string hostIp = 2;
}

message RemoveCfgResponse {
  string status = 1;
}

message WorkloadEventsRequest {
  string accessToken = 1;
  string appInstanceId = 2;
  string hostIp = 3;
}

message WorkloadEventsResponse {
  string response = 1;
  // {
  //   "vmDescribeInfo": [
  //     {
  //      "resourceName": "string",
  //       "logicalResourceId": "string",
  //       "physicalResourceId": "string",
  //       "events": [
  //         {
  //           "eventTime": "string",
  //           "resourceStatus": "string",
  //           "resourceStatusReason": "string"
  //         }
  //       ]
  //     }
  //   ]
  // }
}

message CreateVmImageRequest {
  string accessToken = 1;
  string appInstanceId = 2;
  string hostIp = 3;
  string tenantId = 4;
  string vmId = 5;
}

message CreateVmImageResponse {
  string response = 1;
  // {'imageId': 'xxxaaabbccssdd'}
}

message QueryVmImageRequest {
  string accessToken = 1;
  string appInstanceId = 2;
  string hostIp = 3;
  string imageId = 4;
}

message QueryVmImageResponse {
  string response = 1;
  // {'status': 'Pending', 'sumChunkNum': 100, 'chunkSize': 2048}
}

message DeleteVmImageRequest {
  string accessToken = 1;
  string appInstanceId = 2;
  string hostIp = 3;
  string imageId = 4;
}

message DeleteVmImageResponse {
  string response = 1;
  // {'code': 200, 'msg': 'Ok'}
}

message DownloadVmImageRequest {
  string accessToken = 1;
  string appInstanceId = 2;
  string hostIp = 3;
  string imageId = 4;
  int32  chunkNum = 5;
}

message DownloadVmImageResponse {
  bytes content = 1;
}

message UploadPackageRequest {
  oneof data {
    string accessToken = 1;
    string appPackageId = 2;
    string hostIp = 3;
    string tenantId = 4;
    bytes package = 5;
  };
}

message UploadPackageResponse {
  string status = 1;
}

message DeletePackageRequest {
  string accessToken = 1;
  string tenantId = 2;
  string hostIp = 3;
  string appPackageId = 4;
}

message DeletePackageResponse {
  string status = 1;
}

service AppLCM {
  rpc instantiate (InstantiateRequest) returns (InstantiateResponse) {}
  rpc terminate (TerminateRequest) returns (TerminateResponse) {}
  rpc query (QueryRequest) returns (QueryResponse) {}
  rpc queryKPI (QueryKPIRequest) returns (QueryKPIResponse) {}
  rpc queryPackageStatus (QueryPackageStatusRequest) returns (QueryPackageStatusResponse) {}
  rpc uploadConfig (stream UploadCfgRequest) returns (UploadCfgResponse) {}
  rpc removeConfig (RemoveCfgRequest) returns (RemoveCfgResponse) {}
  rpc workloadEvents (WorkloadEventsRequest) returns (WorkloadEventsResponse) {}
  rpc uploadPackage (stream UploadPackageRequest) returns (UploadPackageResponse) {}
  rpc deletePackage (DeletePackageRequest) returns (DeletePackageResponse) {}
}

service VmImage {
  rpc createVmImage(CreateVmImageRequest) returns (CreateVmImageResponse) {}
  rpc queryVmImage(QueryVmImageRequest) returns (QueryVmImageResponse) {}
  rpc deleteVmImage(DeleteVmImageRequest) returns (DeleteVmImageResponse) {}
  rpc downloadVmImage(DownloadVmImageRequest) returns (stream DownloadVmImageResponse) {}
}
