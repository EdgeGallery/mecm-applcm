// Copyright 2021 Huawei Technologies Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: resservice.proto

package resservice

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateVmImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string                      `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string                      `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string                      `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Image       *CreateVmImageRequest_Image `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CreateVmImageRequest) Reset() {
	*x = CreateVmImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmImageRequest) ProtoMessage() {}

func (x *CreateVmImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmImageRequest.ProtoReflect.Descriptor instead.
func (*CreateVmImageRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVmImageRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateVmImageRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *CreateVmImageRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateVmImageRequest) GetImage() *CreateVmImageRequest_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type CreateVmImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateVmImageResponse) Reset() {
	*x = CreateVmImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmImageResponse) ProtoMessage() {}

func (x *CreateVmImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmImageResponse.ProtoReflect.Descriptor instead.
func (*CreateVmImageResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVmImageResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type QueryVmImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ImageId     string `protobuf:"bytes,4,opt,name=imageId,proto3" json:"imageId,omitempty"`
}

func (x *QueryVmImageRequest) Reset() {
	*x = QueryVmImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVmImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVmImageRequest) ProtoMessage() {}

func (x *QueryVmImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVmImageRequest.ProtoReflect.Descriptor instead.
func (*QueryVmImageRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{2}
}

func (x *QueryVmImageRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *QueryVmImageRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *QueryVmImageRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *QueryVmImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type QueryVmImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *QueryVmImageResponse) Reset() {
	*x = QueryVmImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVmImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVmImageResponse) ProtoMessage() {}

func (x *QueryVmImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVmImageResponse.ProtoReflect.Descriptor instead.
func (*QueryVmImageResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{3}
}

func (x *QueryVmImageResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type DeleteVmImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ImageId     string `protobuf:"bytes,4,opt,name=imageId,proto3" json:"imageId,omitempty"`
}

func (x *DeleteVmImageRequest) Reset() {
	*x = DeleteVmImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVmImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVmImageRequest) ProtoMessage() {}

func (x *DeleteVmImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVmImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteVmImageRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteVmImageRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DeleteVmImageRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DeleteVmImageRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteVmImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type DeleteVmImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteVmImageResponse) Reset() {
	*x = DeleteVmImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVmImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVmImageResponse) ProtoMessage() {}

func (x *DeleteVmImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVmImageResponse.ProtoReflect.Descriptor instead.
func (*DeleteVmImageResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteVmImageResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type ImportVmImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ImageId     string `protobuf:"bytes,4,opt,name=imageId,proto3" json:"imageId,omitempty"`
	ResourceUri string `protobuf:"bytes,5,opt,name=resourceUri,proto3" json:"resourceUri,omitempty"`
}

func (x *ImportVmImageRequest) Reset() {
	*x = ImportVmImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVmImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVmImageRequest) ProtoMessage() {}

func (x *ImportVmImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVmImageRequest.ProtoReflect.Descriptor instead.
func (*ImportVmImageRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{6}
}

func (x *ImportVmImageRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ImportVmImageRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *ImportVmImageRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ImportVmImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImportVmImageRequest) GetResourceUri() string {
	if x != nil {
		return x.ResourceUri
	}
	return ""
}

type ImportVmImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ImportVmImageResponse) Reset() {
	*x = ImportVmImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVmImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVmImageResponse) ProtoMessage() {}

func (x *ImportVmImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVmImageResponse.ProtoReflect.Descriptor instead.
func (*ImportVmImageResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{7}
}

func (x *ImportVmImageResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CreateVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string                  `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string                  `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string                  `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Server      *CreateVmRequest_Server `protobuf:"bytes,4,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *CreateVmRequest) Reset() {
	*x = CreateVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmRequest) ProtoMessage() {}

func (x *CreateVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmRequest.ProtoReflect.Descriptor instead.
func (*CreateVmRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVmRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateVmRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *CreateVmRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateVmRequest) GetServer() *CreateVmRequest_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type CreateVmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateVmResponse) Reset() {
	*x = CreateVmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmResponse) ProtoMessage() {}

func (x *CreateVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmResponse.ProtoReflect.Descriptor instead.
func (*CreateVmResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVmResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type QueryVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	VmId        string `protobuf:"bytes,4,opt,name=vmId,proto3" json:"vmId,omitempty"`
}

func (x *QueryVmRequest) Reset() {
	*x = QueryVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVmRequest) ProtoMessage() {}

func (x *QueryVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVmRequest.ProtoReflect.Descriptor instead.
func (*QueryVmRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{10}
}

func (x *QueryVmRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *QueryVmRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *QueryVmRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *QueryVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type QueryVmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *QueryVmResponse) Reset() {
	*x = QueryVmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVmResponse) ProtoMessage() {}

func (x *QueryVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVmResponse.ProtoReflect.Descriptor instead.
func (*QueryVmResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{11}
}

func (x *QueryVmResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type OperateVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string                        `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string                        `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string                        `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	VmId        string                        `protobuf:"bytes,4,opt,name=vmId,proto3" json:"vmId,omitempty"`
	Action      string                        `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"` // reboot createImage pause(数据保留到内存) unpause(after pause) suspend(数据保留到磁盘) resume(after suspend) stop(关机) start(after stop) createConsole
	Reboot      *OperateVmRequest_Reboot      `protobuf:"bytes,6,opt,name=reboot,proto3" json:"reboot,omitempty"`
	CreateImage *OperateVmRequest_CreateImage `protobuf:"bytes,7,opt,name=createImage,proto3" json:"createImage,omitempty"`
}

func (x *OperateVmRequest) Reset() {
	*x = OperateVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateVmRequest) ProtoMessage() {}

func (x *OperateVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateVmRequest.ProtoReflect.Descriptor instead.
func (*OperateVmRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{12}
}

func (x *OperateVmRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *OperateVmRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *OperateVmRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OperateVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *OperateVmRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *OperateVmRequest) GetReboot() *OperateVmRequest_Reboot {
	if x != nil {
		return x.Reboot
	}
	return nil
}

func (x *OperateVmRequest) GetCreateImage() *OperateVmRequest_CreateImage {
	if x != nil {
		return x.CreateImage
	}
	return nil
}

type OperateVmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *OperateVmResponse) Reset() {
	*x = OperateVmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateVmResponse) ProtoMessage() {}

func (x *OperateVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateVmResponse.ProtoReflect.Descriptor instead.
func (*OperateVmResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{13}
}

func (x *OperateVmResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type DeleteVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	VmId        string `protobuf:"bytes,4,opt,name=vmId,proto3" json:"vmId,omitempty"`
}

func (x *DeleteVmRequest) Reset() {
	*x = DeleteVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVmRequest) ProtoMessage() {}

func (x *DeleteVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVmRequest.ProtoReflect.Descriptor instead.
func (*DeleteVmRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteVmRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DeleteVmRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DeleteVmRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type DeleteVmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteVmResponse) Reset() {
	*x = DeleteVmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVmResponse) ProtoMessage() {}

func (x *DeleteVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVmResponse.ProtoReflect.Descriptor instead.
func (*DeleteVmResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteVmResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CreateFlavorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string                      `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string                      `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string                      `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Flavor      *CreateFlavorRequest_Flavor `protobuf:"bytes,4,opt,name=flavor,proto3" json:"flavor,omitempty"`
}

func (x *CreateFlavorRequest) Reset() {
	*x = CreateFlavorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlavorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlavorRequest) ProtoMessage() {}

func (x *CreateFlavorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlavorRequest.ProtoReflect.Descriptor instead.
func (*CreateFlavorRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{16}
}

func (x *CreateFlavorRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateFlavorRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *CreateFlavorRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateFlavorRequest) GetFlavor() *CreateFlavorRequest_Flavor {
	if x != nil {
		return x.Flavor
	}
	return nil
}

type CreateFlavorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateFlavorResponse) Reset() {
	*x = CreateFlavorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlavorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlavorResponse) ProtoMessage() {}

func (x *CreateFlavorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlavorResponse.ProtoReflect.Descriptor instead.
func (*CreateFlavorResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{17}
}

func (x *CreateFlavorResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type DeleteFlavorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	FlavorId    string `protobuf:"bytes,4,opt,name=flavorId,proto3" json:"flavorId,omitempty"`
}

func (x *DeleteFlavorRequest) Reset() {
	*x = DeleteFlavorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlavorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlavorRequest) ProtoMessage() {}

func (x *DeleteFlavorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlavorRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlavorRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteFlavorRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DeleteFlavorRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DeleteFlavorRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteFlavorRequest) GetFlavorId() string {
	if x != nil {
		return x.FlavorId
	}
	return ""
}

type DeleteFlavorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteFlavorResponse) Reset() {
	*x = DeleteFlavorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlavorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlavorResponse) ProtoMessage() {}

func (x *DeleteFlavorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlavorResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlavorResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteFlavorResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type QueryFlavorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	FlavorId    string `protobuf:"bytes,4,opt,name=flavorId,proto3" json:"flavorId,omitempty"`
}

func (x *QueryFlavorRequest) Reset() {
	*x = QueryFlavorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFlavorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFlavorRequest) ProtoMessage() {}

func (x *QueryFlavorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFlavorRequest.ProtoReflect.Descriptor instead.
func (*QueryFlavorRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{20}
}

func (x *QueryFlavorRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *QueryFlavorRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *QueryFlavorRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *QueryFlavorRequest) GetFlavorId() string {
	if x != nil {
		return x.FlavorId
	}
	return ""
}

type QueryFlavorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *QueryFlavorResponse) Reset() {
	*x = QueryFlavorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFlavorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFlavorResponse) ProtoMessage() {}

func (x *QueryFlavorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFlavorResponse.ProtoReflect.Descriptor instead.
func (*QueryFlavorResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{21}
}

func (x *QueryFlavorResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CreateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string                        `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string                        `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string                        `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Network     *CreateNetworkRequest_Network `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *CreateNetworkRequest) Reset() {
	*x = CreateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest) ProtoMessage() {}

func (x *CreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{22}
}

func (x *CreateNetworkRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateNetworkRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *CreateNetworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateNetworkRequest) GetNetwork() *CreateNetworkRequest_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type CreateNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateNetworkResponse) Reset() {
	*x = CreateNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkResponse) ProtoMessage() {}

func (x *CreateNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkResponse.ProtoReflect.Descriptor instead.
func (*CreateNetworkResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{23}
}

func (x *CreateNetworkResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type DeleteNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	NetworkId   string `protobuf:"bytes,4,opt,name=networkId,proto3" json:"networkId,omitempty"`
}

func (x *DeleteNetworkRequest) Reset() {
	*x = DeleteNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkRequest) ProtoMessage() {}

func (x *DeleteNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkRequest.ProtoReflect.Descriptor instead.
func (*DeleteNetworkRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteNetworkRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DeleteNetworkRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DeleteNetworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteNetworkRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type DeleteNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteNetworkResponse) Reset() {
	*x = DeleteNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkResponse) ProtoMessage() {}

func (x *DeleteNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkResponse.ProtoReflect.Descriptor instead.
func (*DeleteNetworkResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteNetworkResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type QueryNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp      string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId    string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	NetworkId   string `protobuf:"bytes,4,opt,name=networkId,proto3" json:"networkId,omitempty"`
}

func (x *QueryNetworkRequest) Reset() {
	*x = QueryNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNetworkRequest) ProtoMessage() {}

func (x *QueryNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNetworkRequest.ProtoReflect.Descriptor instead.
func (*QueryNetworkRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{26}
}

func (x *QueryNetworkRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *QueryNetworkRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *QueryNetworkRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *QueryNetworkRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type QueryNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *QueryNetworkResponse) Reset() {
	*x = QueryNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNetworkResponse) ProtoMessage() {}

func (x *QueryNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNetworkResponse.ProtoReflect.Descriptor instead.
func (*QueryNetworkResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{27}
}

func (x *QueryNetworkResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CreateSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken   string                                    `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp        string                                    `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId      string                                    `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	SecurityGroup *CreateSecurityGroupRequest_SecurityGroup `protobuf:"bytes,4,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
}

func (x *CreateSecurityGroupRequest) Reset() {
	*x = CreateSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityGroupRequest) ProtoMessage() {}

func (x *CreateSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{28}
}

func (x *CreateSecurityGroupRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateSecurityGroupRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *CreateSecurityGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateSecurityGroupRequest) GetSecurityGroup() *CreateSecurityGroupRequest_SecurityGroup {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

type CreateSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateSecurityGroupResponse) Reset() {
	*x = CreateSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityGroupResponse) ProtoMessage() {}

func (x *CreateSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{29}
}

func (x *CreateSecurityGroupResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type DeleteSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken     string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp          string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId        string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	SecurityGroupId string `protobuf:"bytes,4,opt,name=securityGroupId,proto3" json:"securityGroupId,omitempty"`
}

func (x *DeleteSecurityGroupRequest) Reset() {
	*x = DeleteSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityGroupRequest) ProtoMessage() {}

func (x *DeleteSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteSecurityGroupRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DeleteSecurityGroupRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DeleteSecurityGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteSecurityGroupRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

type DeleteSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteSecurityGroupResponse) Reset() {
	*x = DeleteSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityGroupResponse) ProtoMessage() {}

func (x *DeleteSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteSecurityGroupResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type QuerySecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken     string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp          string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId        string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	SecurityGroupId string `protobuf:"bytes,4,opt,name=securityGroupId,proto3" json:"securityGroupId,omitempty"`
}

func (x *QuerySecurityGroupRequest) Reset() {
	*x = QuerySecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySecurityGroupRequest) ProtoMessage() {}

func (x *QuerySecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*QuerySecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{32}
}

func (x *QuerySecurityGroupRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *QuerySecurityGroupRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *QuerySecurityGroupRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *QuerySecurityGroupRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

type QuerySecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *QuerySecurityGroupResponse) Reset() {
	*x = QuerySecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySecurityGroupResponse) ProtoMessage() {}

func (x *QuerySecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*QuerySecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{33}
}

func (x *QuerySecurityGroupResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CreateSecurityGroupRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken       string                                            `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp            string                                            `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId          string                                            `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	SecurityGroupRule *CreateSecurityGroupRuleRequest_SecurityGroupRule `protobuf:"bytes,4,opt,name=securityGroupRule,proto3" json:"securityGroupRule,omitempty"`
}

func (x *CreateSecurityGroupRuleRequest) Reset() {
	*x = CreateSecurityGroupRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityGroupRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityGroupRuleRequest) ProtoMessage() {}

func (x *CreateSecurityGroupRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityGroupRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityGroupRuleRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{34}
}

func (x *CreateSecurityGroupRuleRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest) GetSecurityGroupRule() *CreateSecurityGroupRuleRequest_SecurityGroupRule {
	if x != nil {
		return x.SecurityGroupRule
	}
	return nil
}

type CreateSecurityGroupRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateSecurityGroupRuleResponse) Reset() {
	*x = CreateSecurityGroupRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityGroupRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityGroupRuleResponse) ProtoMessage() {}

func (x *CreateSecurityGroupRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityGroupRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateSecurityGroupRuleResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{35}
}

func (x *CreateSecurityGroupRuleResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type DeleteSecurityGroupRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken         string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp              string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId            string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	SecurityGroupRuleId string `protobuf:"bytes,4,opt,name=securityGroupRuleId,proto3" json:"securityGroupRuleId,omitempty"`
}

func (x *DeleteSecurityGroupRuleRequest) Reset() {
	*x = DeleteSecurityGroupRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityGroupRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityGroupRuleRequest) ProtoMessage() {}

func (x *DeleteSecurityGroupRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityGroupRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityGroupRuleRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteSecurityGroupRuleRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DeleteSecurityGroupRuleRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *DeleteSecurityGroupRuleRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeleteSecurityGroupRuleRequest) GetSecurityGroupRuleId() string {
	if x != nil {
		return x.SecurityGroupRuleId
	}
	return ""
}

type DeleteSecurityGroupRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteSecurityGroupRuleResponse) Reset() {
	*x = DeleteSecurityGroupRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityGroupRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityGroupRuleResponse) ProtoMessage() {}

func (x *DeleteSecurityGroupRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityGroupRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteSecurityGroupRuleResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteSecurityGroupRuleResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type QuerySecurityGroupRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken     string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	HostIp          string `protobuf:"bytes,2,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	TenantId        string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	SecurityGroupId string `protobuf:"bytes,4,opt,name=securityGroupId,proto3" json:"securityGroupId,omitempty"`
}

func (x *QuerySecurityGroupRuleRequest) Reset() {
	*x = QuerySecurityGroupRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySecurityGroupRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySecurityGroupRuleRequest) ProtoMessage() {}

func (x *QuerySecurityGroupRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySecurityGroupRuleRequest.ProtoReflect.Descriptor instead.
func (*QuerySecurityGroupRuleRequest) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{38}
}

func (x *QuerySecurityGroupRuleRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *QuerySecurityGroupRuleRequest) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *QuerySecurityGroupRuleRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *QuerySecurityGroupRuleRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

type QuerySecurityGroupRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *QuerySecurityGroupRuleResponse) Reset() {
	*x = QuerySecurityGroupRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySecurityGroupRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySecurityGroupRuleResponse) ProtoMessage() {}

func (x *QuerySecurityGroupRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySecurityGroupRuleResponse.ProtoReflect.Descriptor instead.
func (*QuerySecurityGroupRuleResponse) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{39}
}

func (x *QuerySecurityGroupRuleResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CreateVmImageRequest_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerFormat string            `protobuf:"bytes,2,opt,name=containerFormat,proto3" json:"containerFormat,omitempty"`
	DiskFormat      string            `protobuf:"bytes,3,opt,name=diskFormat,proto3" json:"diskFormat,omitempty"`
	MinRam          int32             `protobuf:"varint,4,opt,name=minRam,proto3" json:"minRam,omitempty"`
	MinDisk         int32             `protobuf:"varint,5,opt,name=minDisk,proto3" json:"minDisk,omitempty"`
	Properties      map[string]string `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateVmImageRequest_Image) Reset() {
	*x = CreateVmImageRequest_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmImageRequest_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmImageRequest_Image) ProtoMessage() {}

func (x *CreateVmImageRequest_Image) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmImageRequest_Image.ProtoReflect.Descriptor instead.
func (*CreateVmImageRequest_Image) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateVmImageRequest_Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVmImageRequest_Image) GetContainerFormat() string {
	if x != nil {
		return x.ContainerFormat
	}
	return ""
}

func (x *CreateVmImageRequest_Image) GetDiskFormat() string {
	if x != nil {
		return x.DiskFormat
	}
	return ""
}

func (x *CreateVmImageRequest_Image) GetMinRam() int32 {
	if x != nil {
		return x.MinRam
	}
	return 0
}

func (x *CreateVmImageRequest_Image) GetMinDisk() int32 {
	if x != nil {
		return x.MinDisk
	}
	return 0
}

func (x *CreateVmImageRequest_Image) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreateVmRequest_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Flavor           string                            `protobuf:"bytes,2,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Image            string                            `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	AvailabilityZone string                            `protobuf:"bytes,4,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	UserData         string                            `protobuf:"bytes,5,opt,name=userData,proto3" json:"userData,omitempty"`
	ConfigDrive      bool                              `protobuf:"varint,6,opt,name=configDrive,proto3" json:"configDrive,omitempty"`
	SecurityGroups   []string                          `protobuf:"bytes,7,rep,name=securityGroups,proto3" json:"securityGroups,omitempty"`
	Networks         []*CreateVmRequest_Server_Network `protobuf:"bytes,8,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *CreateVmRequest_Server) Reset() {
	*x = CreateVmRequest_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmRequest_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmRequest_Server) ProtoMessage() {}

func (x *CreateVmRequest_Server) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmRequest_Server.ProtoReflect.Descriptor instead.
func (*CreateVmRequest_Server) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CreateVmRequest_Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVmRequest_Server) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *CreateVmRequest_Server) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateVmRequest_Server) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *CreateVmRequest_Server) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *CreateVmRequest_Server) GetConfigDrive() bool {
	if x != nil {
		return x.ConfigDrive
	}
	return false
}

func (x *CreateVmRequest_Server) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *CreateVmRequest_Server) GetNetworks() []*CreateVmRequest_Server_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

type CreateVmRequest_Server_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	FixedIp string `protobuf:"bytes,2,opt,name=fixedIp,proto3" json:"fixedIp,omitempty"`
}

func (x *CreateVmRequest_Server_Network) Reset() {
	*x = CreateVmRequest_Server_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmRequest_Server_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmRequest_Server_Network) ProtoMessage() {}

func (x *CreateVmRequest_Server_Network) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmRequest_Server_Network.ProtoReflect.Descriptor instead.
func (*CreateVmRequest_Server_Network) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *CreateVmRequest_Server_Network) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CreateVmRequest_Server_Network) GetFixedIp() string {
	if x != nil {
		return x.FixedIp
	}
	return ""
}

type OperateVmRequest_Reboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // HARD SOFT
}

func (x *OperateVmRequest_Reboot) Reset() {
	*x = OperateVmRequest_Reboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateVmRequest_Reboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateVmRequest_Reboot) ProtoMessage() {}

func (x *OperateVmRequest_Reboot) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateVmRequest_Reboot.ProtoReflect.Descriptor instead.
func (*OperateVmRequest_Reboot) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{12, 0}
}

func (x *OperateVmRequest_Reboot) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type OperateVmRequest_CreateImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OperateVmRequest_CreateImage) Reset() {
	*x = OperateVmRequest_CreateImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateVmRequest_CreateImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateVmRequest_CreateImage) ProtoMessage() {}

func (x *OperateVmRequest_CreateImage) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateVmRequest_CreateImage.ProtoReflect.Descriptor instead.
func (*OperateVmRequest_CreateImage) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{12, 1}
}

func (x *OperateVmRequest_CreateImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperateVmRequest_CreateImage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateFlavorRequest_Flavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vcpus      int32             `protobuf:"varint,2,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	Ram        int32             `protobuf:"varint,3,opt,name=ram,proto3" json:"ram,omitempty"`
	Disk       int32             `protobuf:"varint,4,opt,name=disk,proto3" json:"disk,omitempty"`
	Swap       int32             `protobuf:"varint,5,opt,name=swap,proto3" json:"swap,omitempty"`
	ExtraSpecs map[string]string `protobuf:"bytes,8,rep,name=extraSpecs,proto3" json:"extraSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateFlavorRequest_Flavor) Reset() {
	*x = CreateFlavorRequest_Flavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlavorRequest_Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlavorRequest_Flavor) ProtoMessage() {}

func (x *CreateFlavorRequest_Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlavorRequest_Flavor.ProtoReflect.Descriptor instead.
func (*CreateFlavorRequest_Flavor) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CreateFlavorRequest_Flavor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlavorRequest_Flavor) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *CreateFlavorRequest_Flavor) GetRam() int32 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *CreateFlavorRequest_Flavor) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *CreateFlavorRequest_Flavor) GetSwap() int32 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *CreateFlavorRequest_Flavor) GetExtraSpecs() map[string]string {
	if x != nil {
		return x.ExtraSpecs
	}
	return nil
}

type CreateNetworkRequest_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AdminStateUp            bool                                    `protobuf:"varint,2,opt,name=adminStateUp,proto3" json:"adminStateUp,omitempty"`
	DnsDomain               string                                  `protobuf:"bytes,3,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
	Mtu                     int32                                   `protobuf:"varint,4,opt,name=mtu,proto3" json:"mtu,omitempty"`
	PortSecurityEnabled     bool                                    `protobuf:"varint,5,opt,name=portSecurityEnabled,proto3" json:"portSecurityEnabled,omitempty"`
	ProviderNetworkType     string                                  `protobuf:"bytes,6,opt,name=providerNetworkType,proto3" json:"providerNetworkType,omitempty"`
	ProviderPhysicalNetwork string                                  `protobuf:"bytes,7,opt,name=providerPhysicalNetwork,proto3" json:"providerPhysicalNetwork,omitempty"`
	ProviderSegmentationId  int32                                   `protobuf:"varint,8,opt,name=providerSegmentationId,proto3" json:"providerSegmentationId,omitempty"`
	QosPolicyId             string                                  `protobuf:"bytes,9,opt,name=qosPolicyId,proto3" json:"qosPolicyId,omitempty"`
	RouterExternal          bool                                    `protobuf:"varint,10,opt,name=routerExternal,proto3" json:"routerExternal,omitempty"`
	Segments                []*CreateNetworkRequest_Network_Segment `protobuf:"bytes,11,rep,name=segments,proto3" json:"segments,omitempty"`
	Shared                  bool                                    `protobuf:"varint,12,opt,name=shared,proto3" json:"shared,omitempty"`
	VlanTransparent         bool                                    `protobuf:"varint,13,opt,name=vlanTransparent,proto3" json:"vlanTransparent,omitempty"`
	IsDefault               bool                                    `protobuf:"varint,14,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	TenantId                string                                  `protobuf:"bytes,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Subnets                 []*CreateNetworkRequest_Network_Subnet  `protobuf:"bytes,16,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *CreateNetworkRequest_Network) Reset() {
	*x = CreateNetworkRequest_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkRequest_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest_Network) ProtoMessage() {}

func (x *CreateNetworkRequest_Network) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest_Network.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest_Network) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CreateNetworkRequest_Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNetworkRequest_Network) GetAdminStateUp() bool {
	if x != nil {
		return x.AdminStateUp
	}
	return false
}

func (x *CreateNetworkRequest_Network) GetDnsDomain() string {
	if x != nil {
		return x.DnsDomain
	}
	return ""
}

func (x *CreateNetworkRequest_Network) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *CreateNetworkRequest_Network) GetPortSecurityEnabled() bool {
	if x != nil {
		return x.PortSecurityEnabled
	}
	return false
}

func (x *CreateNetworkRequest_Network) GetProviderNetworkType() string {
	if x != nil {
		return x.ProviderNetworkType
	}
	return ""
}

func (x *CreateNetworkRequest_Network) GetProviderPhysicalNetwork() string {
	if x != nil {
		return x.ProviderPhysicalNetwork
	}
	return ""
}

func (x *CreateNetworkRequest_Network) GetProviderSegmentationId() int32 {
	if x != nil {
		return x.ProviderSegmentationId
	}
	return 0
}

func (x *CreateNetworkRequest_Network) GetQosPolicyId() string {
	if x != nil {
		return x.QosPolicyId
	}
	return ""
}

func (x *CreateNetworkRequest_Network) GetRouterExternal() bool {
	if x != nil {
		return x.RouterExternal
	}
	return false
}

func (x *CreateNetworkRequest_Network) GetSegments() []*CreateNetworkRequest_Network_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *CreateNetworkRequest_Network) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *CreateNetworkRequest_Network) GetVlanTransparent() bool {
	if x != nil {
		return x.VlanTransparent
	}
	return false
}

func (x *CreateNetworkRequest_Network) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *CreateNetworkRequest_Network) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateNetworkRequest_Network) GetSubnets() []*CreateNetworkRequest_Network_Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type CreateNetworkRequest_Network_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderSegmentationId  int32  `protobuf:"varint,1,opt,name=providerSegmentationId,proto3" json:"providerSegmentationId,omitempty"`
	ProviderPhysicalNetwork string `protobuf:"bytes,2,opt,name=providerPhysicalNetwork,proto3" json:"providerPhysicalNetwork,omitempty"`
	ProviderNetworkType     string `protobuf:"bytes,3,opt,name=providerNetworkType,proto3" json:"providerNetworkType,omitempty"`
}

func (x *CreateNetworkRequest_Network_Segment) Reset() {
	*x = CreateNetworkRequest_Network_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkRequest_Network_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest_Network_Segment) ProtoMessage() {}

func (x *CreateNetworkRequest_Network_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest_Network_Segment.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest_Network_Segment) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{22, 0, 0}
}

func (x *CreateNetworkRequest_Network_Segment) GetProviderSegmentationId() int32 {
	if x != nil {
		return x.ProviderSegmentationId
	}
	return 0
}

func (x *CreateNetworkRequest_Network_Segment) GetProviderPhysicalNetwork() string {
	if x != nil {
		return x.ProviderPhysicalNetwork
	}
	return ""
}

func (x *CreateNetworkRequest_Network_Segment) GetProviderNetworkType() string {
	if x != nil {
		return x.ProviderNetworkType
	}
	return ""
}

type CreateNetworkRequest_Network_Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EnableDhcp      bool                                                  `protobuf:"varint,2,opt,name=enableDhcp,proto3" json:"enableDhcp,omitempty"`
	DnsNameservers  []string                                              `protobuf:"bytes,3,rep,name=dnsNameservers,proto3" json:"dnsNameservers,omitempty"`
	AllocationPools []*CreateNetworkRequest_Network_Subnet_AllocationPool `protobuf:"bytes,4,rep,name=allocationPools,proto3" json:"allocationPools,omitempty"`
	IpVersion       int32                                                 `protobuf:"varint,5,opt,name=ipVersion,proto3" json:"ipVersion,omitempty"`
	GatewayIp       string                                                `protobuf:"bytes,6,opt,name=gatewayIp,proto3" json:"gatewayIp,omitempty"`
	Cidr            string                                                `protobuf:"bytes,7,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Ipv6AddressMode string                                                `protobuf:"bytes,8,opt,name=ipv6AddressMode,proto3" json:"ipv6AddressMode,omitempty"`
	Ipv6RaMode      string                                                `protobuf:"bytes,9,opt,name=ipv6RaMode,proto3" json:"ipv6RaMode,omitempty"`
}

func (x *CreateNetworkRequest_Network_Subnet) Reset() {
	*x = CreateNetworkRequest_Network_Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkRequest_Network_Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest_Network_Subnet) ProtoMessage() {}

func (x *CreateNetworkRequest_Network_Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest_Network_Subnet.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest_Network_Subnet) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{22, 0, 1}
}

func (x *CreateNetworkRequest_Network_Subnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNetworkRequest_Network_Subnet) GetEnableDhcp() bool {
	if x != nil {
		return x.EnableDhcp
	}
	return false
}

func (x *CreateNetworkRequest_Network_Subnet) GetDnsNameservers() []string {
	if x != nil {
		return x.DnsNameservers
	}
	return nil
}

func (x *CreateNetworkRequest_Network_Subnet) GetAllocationPools() []*CreateNetworkRequest_Network_Subnet_AllocationPool {
	if x != nil {
		return x.AllocationPools
	}
	return nil
}

func (x *CreateNetworkRequest_Network_Subnet) GetIpVersion() int32 {
	if x != nil {
		return x.IpVersion
	}
	return 0
}

func (x *CreateNetworkRequest_Network_Subnet) GetGatewayIp() string {
	if x != nil {
		return x.GatewayIp
	}
	return ""
}

func (x *CreateNetworkRequest_Network_Subnet) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *CreateNetworkRequest_Network_Subnet) GetIpv6AddressMode() string {
	if x != nil {
		return x.Ipv6AddressMode
	}
	return ""
}

func (x *CreateNetworkRequest_Network_Subnet) GetIpv6RaMode() string {
	if x != nil {
		return x.Ipv6RaMode
	}
	return ""
}

type CreateNetworkRequest_Network_Subnet_AllocationPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CreateNetworkRequest_Network_Subnet_AllocationPool) Reset() {
	*x = CreateNetworkRequest_Network_Subnet_AllocationPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkRequest_Network_Subnet_AllocationPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest_Network_Subnet_AllocationPool) ProtoMessage() {}

func (x *CreateNetworkRequest_Network_Subnet_AllocationPool) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest_Network_Subnet_AllocationPool.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest_Network_Subnet_AllocationPool) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{22, 0, 1, 0}
}

func (x *CreateNetworkRequest_Network_Subnet_AllocationPool) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *CreateNetworkRequest_Network_Subnet_AllocationPool) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type CreateSecurityGroupRequest_SecurityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateSecurityGroupRequest_SecurityGroup) Reset() {
	*x = CreateSecurityGroupRequest_SecurityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityGroupRequest_SecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityGroupRequest_SecurityGroup) ProtoMessage() {}

func (x *CreateSecurityGroupRequest_SecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityGroupRequest_SecurityGroup.ProtoReflect.Descriptor instead.
func (*CreateSecurityGroupRequest_SecurityGroup) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CreateSecurityGroupRequest_SecurityGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateSecurityGroupRuleRequest_SecurityGroupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroupId string `protobuf:"bytes,1,opt,name=securityGroupId,proto3" json:"securityGroupId,omitempty"`
	Direction       string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Protocol        string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Ethertype       string `protobuf:"bytes,4,opt,name=ethertype,proto3" json:"ethertype,omitempty"`
	PortRangeMax    int32  `protobuf:"varint,5,opt,name=portRangeMax,proto3" json:"portRangeMax,omitempty"`
	PortRangeMin    int32  `protobuf:"varint,6,opt,name=portRangeMin,proto3" json:"portRangeMin,omitempty"`
	RemoteIpPrefix  string `protobuf:"bytes,8,opt,name=remoteIpPrefix,proto3" json:"remoteIpPrefix,omitempty"`
	RemoteGroupId   string `protobuf:"bytes,9,opt,name=remoteGroupId,proto3" json:"remoteGroupId,omitempty"`
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) Reset() {
	*x = CreateSecurityGroupRuleRequest_SecurityGroupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resservice_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityGroupRuleRequest_SecurityGroupRule) ProtoMessage() {}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) ProtoReflect() protoreflect.Message {
	mi := &file_resservice_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityGroupRuleRequest_SecurityGroupRule.ProtoReflect.Descriptor instead.
func (*CreateSecurityGroupRuleRequest_SecurityGroupRule) Descriptor() ([]byte, []int) {
	return file_resservice_proto_rawDescGZIP(), []int{34, 0}
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetEthertype() string {
	if x != nil {
		return x.Ethertype
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetPortRangeMax() int32 {
	if x != nil {
		return x.PortRangeMax
	}
	return 0
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetPortRangeMin() int32 {
	if x != nil {
		return x.PortRangeMin
	}
	return 0
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetRemoteIpPrefix() string {
	if x != nil {
		return x.RemoteIpPrefix
	}
	return ""
}

func (x *CreateSecurityGroupRuleRequest_SecurityGroupRule) GetRemoteGroupId() string {
	if x != nil {
		return x.RemoteGroupId
	}
	return ""
}

var File_resservice_proto protoreflect.FileDescriptor

var file_resservice_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xdb,
	0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x14,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x22, 0x33, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0xe3, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x46, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x3d, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x70, 0x22, 0x2e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x6d, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xf0, 0x03, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x1a, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0xb2, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x56, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x6d, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb1, 0x03, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x1a, 0x83, 0x02, 0x0a, 0x06, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x77, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70,
	0x12, 0x56, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x49, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x0b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xfb, 0x09, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6c, 0x61,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x1a, 0xad, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0xa2, 0x03, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x68, 0x63, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x68, 0x63, 0x70,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x70, 0x76, 0x36, 0x52, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x38, 0x0a, 0x0e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x33, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf3, 0x01,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x23,
	0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c,
	0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x39, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x90, 0x04, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0xab, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a,
	0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x3c,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xec, 0x02, 0x0a,
	0x0d, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x56,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xaf, 0x02, 0x0a, 0x09,
	0x56, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x6d, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6d, 0x12, 0x1a, 0x2e,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x56, 0x6d, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6d,
	0x12, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x8b, 0x02,
	0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x53, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12,
	0x1f, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x95, 0x02, 0x0a, 0x0e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x56,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f,
	0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xb0, 0x05, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x13,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resservice_proto_rawDescOnce sync.Once
	file_resservice_proto_rawDescData = file_resservice_proto_rawDesc
)

func file_resservice_proto_rawDescGZIP() []byte {
	file_resservice_proto_rawDescOnce.Do(func() {
		file_resservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_resservice_proto_rawDescData)
	})
	return file_resservice_proto_rawDescData
}

var file_resservice_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_resservice_proto_goTypes = []interface{}{
	(*CreateVmImageRequest)(nil),                               // 0: resservice.CreateVmImageRequest
	(*CreateVmImageResponse)(nil),                              // 1: resservice.CreateVmImageResponse
	(*QueryVmImageRequest)(nil),                                // 2: resservice.QueryVmImageRequest
	(*QueryVmImageResponse)(nil),                               // 3: resservice.QueryVmImageResponse
	(*DeleteVmImageRequest)(nil),                               // 4: resservice.DeleteVmImageRequest
	(*DeleteVmImageResponse)(nil),                              // 5: resservice.DeleteVmImageResponse
	(*ImportVmImageRequest)(nil),                               // 6: resservice.ImportVmImageRequest
	(*ImportVmImageResponse)(nil),                              // 7: resservice.ImportVmImageResponse
	(*CreateVmRequest)(nil),                                    // 8: resservice.CreateVmRequest
	(*CreateVmResponse)(nil),                                   // 9: resservice.CreateVmResponse
	(*QueryVmRequest)(nil),                                     // 10: resservice.QueryVmRequest
	(*QueryVmResponse)(nil),                                    // 11: resservice.QueryVmResponse
	(*OperateVmRequest)(nil),                                   // 12: resservice.OperateVmRequest
	(*OperateVmResponse)(nil),                                  // 13: resservice.OperateVmResponse
	(*DeleteVmRequest)(nil),                                    // 14: resservice.DeleteVmRequest
	(*DeleteVmResponse)(nil),                                   // 15: resservice.DeleteVmResponse
	(*CreateFlavorRequest)(nil),                                // 16: resservice.CreateFlavorRequest
	(*CreateFlavorResponse)(nil),                               // 17: resservice.CreateFlavorResponse
	(*DeleteFlavorRequest)(nil),                                // 18: resservice.DeleteFlavorRequest
	(*DeleteFlavorResponse)(nil),                               // 19: resservice.DeleteFlavorResponse
	(*QueryFlavorRequest)(nil),                                 // 20: resservice.QueryFlavorRequest
	(*QueryFlavorResponse)(nil),                                // 21: resservice.QueryFlavorResponse
	(*CreateNetworkRequest)(nil),                               // 22: resservice.CreateNetworkRequest
	(*CreateNetworkResponse)(nil),                              // 23: resservice.CreateNetworkResponse
	(*DeleteNetworkRequest)(nil),                               // 24: resservice.DeleteNetworkRequest
	(*DeleteNetworkResponse)(nil),                              // 25: resservice.DeleteNetworkResponse
	(*QueryNetworkRequest)(nil),                                // 26: resservice.QueryNetworkRequest
	(*QueryNetworkResponse)(nil),                               // 27: resservice.QueryNetworkResponse
	(*CreateSecurityGroupRequest)(nil),                         // 28: resservice.CreateSecurityGroupRequest
	(*CreateSecurityGroupResponse)(nil),                        // 29: resservice.CreateSecurityGroupResponse
	(*DeleteSecurityGroupRequest)(nil),                         // 30: resservice.DeleteSecurityGroupRequest
	(*DeleteSecurityGroupResponse)(nil),                        // 31: resservice.DeleteSecurityGroupResponse
	(*QuerySecurityGroupRequest)(nil),                          // 32: resservice.QuerySecurityGroupRequest
	(*QuerySecurityGroupResponse)(nil),                         // 33: resservice.QuerySecurityGroupResponse
	(*CreateSecurityGroupRuleRequest)(nil),                     // 34: resservice.CreateSecurityGroupRuleRequest
	(*CreateSecurityGroupRuleResponse)(nil),                    // 35: resservice.CreateSecurityGroupRuleResponse
	(*DeleteSecurityGroupRuleRequest)(nil),                     // 36: resservice.DeleteSecurityGroupRuleRequest
	(*DeleteSecurityGroupRuleResponse)(nil),                    // 37: resservice.DeleteSecurityGroupRuleResponse
	(*QuerySecurityGroupRuleRequest)(nil),                      // 38: resservice.QuerySecurityGroupRuleRequest
	(*QuerySecurityGroupRuleResponse)(nil),                     // 39: resservice.QuerySecurityGroupRuleResponse
	(*CreateVmImageRequest_Image)(nil),                         // 40: resservice.CreateVmImageRequest.Image
	nil,                                                        // 41: resservice.CreateVmImageRequest.Image.PropertiesEntry
	(*CreateVmRequest_Server)(nil),                             // 42: resservice.CreateVmRequest.Server
	(*CreateVmRequest_Server_Network)(nil),                     // 43: resservice.CreateVmRequest.Server.Network
	(*OperateVmRequest_Reboot)(nil),                            // 44: resservice.OperateVmRequest.Reboot
	(*OperateVmRequest_CreateImage)(nil),                       // 45: resservice.OperateVmRequest.CreateImage
	nil,                                                        // 46: resservice.OperateVmRequest.CreateImage.MetadataEntry
	(*CreateFlavorRequest_Flavor)(nil),                         // 47: resservice.CreateFlavorRequest.Flavor
	nil,                                                        // 48: resservice.CreateFlavorRequest.Flavor.ExtraSpecsEntry
	(*CreateNetworkRequest_Network)(nil),                       // 49: resservice.CreateNetworkRequest.Network
	(*CreateNetworkRequest_Network_Segment)(nil),               // 50: resservice.CreateNetworkRequest.Network.Segment
	(*CreateNetworkRequest_Network_Subnet)(nil),                // 51: resservice.CreateNetworkRequest.Network.Subnet
	(*CreateNetworkRequest_Network_Subnet_AllocationPool)(nil), // 52: resservice.CreateNetworkRequest.Network.Subnet.AllocationPool
	(*CreateSecurityGroupRequest_SecurityGroup)(nil),           // 53: resservice.CreateSecurityGroupRequest.SecurityGroup
	(*CreateSecurityGroupRuleRequest_SecurityGroupRule)(nil),   // 54: resservice.CreateSecurityGroupRuleRequest.SecurityGroupRule
}
var file_resservice_proto_depIdxs = []int32{
	40, // 0: resservice.CreateVmImageRequest.image:type_name -> resservice.CreateVmImageRequest.Image
	42, // 1: resservice.CreateVmRequest.server:type_name -> resservice.CreateVmRequest.Server
	44, // 2: resservice.OperateVmRequest.reboot:type_name -> resservice.OperateVmRequest.Reboot
	45, // 3: resservice.OperateVmRequest.createImage:type_name -> resservice.OperateVmRequest.CreateImage
	47, // 4: resservice.CreateFlavorRequest.flavor:type_name -> resservice.CreateFlavorRequest.Flavor
	49, // 5: resservice.CreateNetworkRequest.network:type_name -> resservice.CreateNetworkRequest.Network
	53, // 6: resservice.CreateSecurityGroupRequest.securityGroup:type_name -> resservice.CreateSecurityGroupRequest.SecurityGroup
	54, // 7: resservice.CreateSecurityGroupRuleRequest.securityGroupRule:type_name -> resservice.CreateSecurityGroupRuleRequest.SecurityGroupRule
	41, // 8: resservice.CreateVmImageRequest.Image.properties:type_name -> resservice.CreateVmImageRequest.Image.PropertiesEntry
	43, // 9: resservice.CreateVmRequest.Server.networks:type_name -> resservice.CreateVmRequest.Server.Network
	46, // 10: resservice.OperateVmRequest.CreateImage.metadata:type_name -> resservice.OperateVmRequest.CreateImage.MetadataEntry
	48, // 11: resservice.CreateFlavorRequest.Flavor.extraSpecs:type_name -> resservice.CreateFlavorRequest.Flavor.ExtraSpecsEntry
	50, // 12: resservice.CreateNetworkRequest.Network.segments:type_name -> resservice.CreateNetworkRequest.Network.Segment
	51, // 13: resservice.CreateNetworkRequest.Network.subnets:type_name -> resservice.CreateNetworkRequest.Network.Subnet
	52, // 14: resservice.CreateNetworkRequest.Network.Subnet.allocationPools:type_name -> resservice.CreateNetworkRequest.Network.Subnet.AllocationPool
	0,  // 15: resservice.VmImageManger.createVmImage:input_type -> resservice.CreateVmImageRequest
	4,  // 16: resservice.VmImageManger.deleteVmImage:input_type -> resservice.DeleteVmImageRequest
	6,  // 17: resservice.VmImageManger.importVmImage:input_type -> resservice.ImportVmImageRequest
	2,  // 18: resservice.VmImageManger.queryVmImage:input_type -> resservice.QueryVmImageRequest
	8,  // 19: resservice.VmManager.createVm:input_type -> resservice.CreateVmRequest
	10, // 20: resservice.VmManager.queryVm:input_type -> resservice.QueryVmRequest
	12, // 21: resservice.VmManager.operateVm:input_type -> resservice.OperateVmRequest
	14, // 22: resservice.VmManager.deleteVm:input_type -> resservice.DeleteVmRequest
	16, // 23: resservice.FlavorManager.createFlavor:input_type -> resservice.CreateFlavorRequest
	18, // 24: resservice.FlavorManager.deleteFlavor:input_type -> resservice.DeleteFlavorRequest
	20, // 25: resservice.FlavorManager.queryFlavor:input_type -> resservice.QueryFlavorRequest
	22, // 26: resservice.NetworkManager.createNetwork:input_type -> resservice.CreateNetworkRequest
	24, // 27: resservice.NetworkManager.deleteNetwork:input_type -> resservice.DeleteNetworkRequest
	26, // 28: resservice.NetworkManager.queryNetwork:input_type -> resservice.QueryNetworkRequest
	28, // 29: resservice.SecurityGroupManager.createSecurityGroup:input_type -> resservice.CreateSecurityGroupRequest
	30, // 30: resservice.SecurityGroupManager.deleteSecurityGroup:input_type -> resservice.DeleteSecurityGroupRequest
	32, // 31: resservice.SecurityGroupManager.querySecurityGroup:input_type -> resservice.QuerySecurityGroupRequest
	34, // 32: resservice.SecurityGroupManager.createSecurityGroupRule:input_type -> resservice.CreateSecurityGroupRuleRequest
	36, // 33: resservice.SecurityGroupManager.deleteSecurityGroupRule:input_type -> resservice.DeleteSecurityGroupRuleRequest
	38, // 34: resservice.SecurityGroupManager.querySecurityGroupRule:input_type -> resservice.QuerySecurityGroupRuleRequest
	1,  // 35: resservice.VmImageManger.createVmImage:output_type -> resservice.CreateVmImageResponse
	5,  // 36: resservice.VmImageManger.deleteVmImage:output_type -> resservice.DeleteVmImageResponse
	7,  // 37: resservice.VmImageManger.importVmImage:output_type -> resservice.ImportVmImageResponse
	3,  // 38: resservice.VmImageManger.queryVmImage:output_type -> resservice.QueryVmImageResponse
	9,  // 39: resservice.VmManager.createVm:output_type -> resservice.CreateVmResponse
	11, // 40: resservice.VmManager.queryVm:output_type -> resservice.QueryVmResponse
	13, // 41: resservice.VmManager.operateVm:output_type -> resservice.OperateVmResponse
	15, // 42: resservice.VmManager.deleteVm:output_type -> resservice.DeleteVmResponse
	17, // 43: resservice.FlavorManager.createFlavor:output_type -> resservice.CreateFlavorResponse
	19, // 44: resservice.FlavorManager.deleteFlavor:output_type -> resservice.DeleteFlavorResponse
	21, // 45: resservice.FlavorManager.queryFlavor:output_type -> resservice.QueryFlavorResponse
	23, // 46: resservice.NetworkManager.createNetwork:output_type -> resservice.CreateNetworkResponse
	25, // 47: resservice.NetworkManager.deleteNetwork:output_type -> resservice.DeleteNetworkResponse
	27, // 48: resservice.NetworkManager.queryNetwork:output_type -> resservice.QueryNetworkResponse
	29, // 49: resservice.SecurityGroupManager.createSecurityGroup:output_type -> resservice.CreateSecurityGroupResponse
	31, // 50: resservice.SecurityGroupManager.deleteSecurityGroup:output_type -> resservice.DeleteSecurityGroupResponse
	33, // 51: resservice.SecurityGroupManager.querySecurityGroup:output_type -> resservice.QuerySecurityGroupResponse
	35, // 52: resservice.SecurityGroupManager.createSecurityGroupRule:output_type -> resservice.CreateSecurityGroupRuleResponse
	37, // 53: resservice.SecurityGroupManager.deleteSecurityGroupRule:output_type -> resservice.DeleteSecurityGroupRuleResponse
	39, // 54: resservice.SecurityGroupManager.querySecurityGroupRule:output_type -> resservice.QuerySecurityGroupRuleResponse
	35, // [35:55] is the sub-list for method output_type
	15, // [15:35] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_resservice_proto_init() }
func file_resservice_proto_init() {
	if File_resservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVmImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVmImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVmImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVmImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVmImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVmImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateVmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlavorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlavorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlavorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlavorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFlavorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFlavorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityGroupRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityGroupRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityGroupRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityGroupRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySecurityGroupRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySecurityGroupRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmImageRequest_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmRequest_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmRequest_Server_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateVmRequest_Reboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateVmRequest_CreateImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlavorRequest_Flavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkRequest_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkRequest_Network_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkRequest_Network_Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkRequest_Network_Subnet_AllocationPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityGroupRequest_SecurityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resservice_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityGroupRuleRequest_SecurityGroupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_resservice_proto_goTypes,
		DependencyIndexes: file_resservice_proto_depIdxs,
		MessageInfos:      file_resservice_proto_msgTypes,
	}.Build()
	File_resservice_proto = out.File
	file_resservice_proto_rawDesc = nil
	file_resservice_proto_goTypes = nil
	file_resservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VmImageMangerClient is the client API for VmImageManger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VmImageMangerClient interface {
	CreateVmImage(ctx context.Context, in *CreateVmImageRequest, opts ...grpc.CallOption) (*CreateVmImageResponse, error)
	DeleteVmImage(ctx context.Context, in *DeleteVmImageRequest, opts ...grpc.CallOption) (*DeleteVmImageResponse, error)
	ImportVmImage(ctx context.Context, in *ImportVmImageRequest, opts ...grpc.CallOption) (*ImportVmImageResponse, error)
	QueryVmImage(ctx context.Context, in *QueryVmImageRequest, opts ...grpc.CallOption) (*QueryVmImageResponse, error)
}

type vmImageMangerClient struct {
	cc grpc.ClientConnInterface
}

func NewVmImageMangerClient(cc grpc.ClientConnInterface) VmImageMangerClient {
	return &vmImageMangerClient{cc}
}

func (c *vmImageMangerClient) CreateVmImage(ctx context.Context, in *CreateVmImageRequest, opts ...grpc.CallOption) (*CreateVmImageResponse, error) {
	out := new(CreateVmImageResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmImageManger/createVmImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmImageMangerClient) DeleteVmImage(ctx context.Context, in *DeleteVmImageRequest, opts ...grpc.CallOption) (*DeleteVmImageResponse, error) {
	out := new(DeleteVmImageResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmImageManger/deleteVmImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmImageMangerClient) ImportVmImage(ctx context.Context, in *ImportVmImageRequest, opts ...grpc.CallOption) (*ImportVmImageResponse, error) {
	out := new(ImportVmImageResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmImageManger/importVmImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmImageMangerClient) QueryVmImage(ctx context.Context, in *QueryVmImageRequest, opts ...grpc.CallOption) (*QueryVmImageResponse, error) {
	out := new(QueryVmImageResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmImageManger/queryVmImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmImageMangerServer is the server API for VmImageManger service.
type VmImageMangerServer interface {
	CreateVmImage(context.Context, *CreateVmImageRequest) (*CreateVmImageResponse, error)
	DeleteVmImage(context.Context, *DeleteVmImageRequest) (*DeleteVmImageResponse, error)
	ImportVmImage(context.Context, *ImportVmImageRequest) (*ImportVmImageResponse, error)
	QueryVmImage(context.Context, *QueryVmImageRequest) (*QueryVmImageResponse, error)
}

// UnimplementedVmImageMangerServer can be embedded to have forward compatible implementations.
type UnimplementedVmImageMangerServer struct {
}

func (*UnimplementedVmImageMangerServer) CreateVmImage(context.Context, *CreateVmImageRequest) (*CreateVmImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVmImage not implemented")
}
func (*UnimplementedVmImageMangerServer) DeleteVmImage(context.Context, *DeleteVmImageRequest) (*DeleteVmImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVmImage not implemented")
}
func (*UnimplementedVmImageMangerServer) ImportVmImage(context.Context, *ImportVmImageRequest) (*ImportVmImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportVmImage not implemented")
}
func (*UnimplementedVmImageMangerServer) QueryVmImage(context.Context, *QueryVmImageRequest) (*QueryVmImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVmImage not implemented")
}

func RegisterVmImageMangerServer(s *grpc.Server, srv VmImageMangerServer) {
	s.RegisterService(&_VmImageManger_serviceDesc, srv)
}

func _VmImageManger_CreateVmImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVmImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmImageMangerServer).CreateVmImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmImageManger/CreateVmImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmImageMangerServer).CreateVmImage(ctx, req.(*CreateVmImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmImageManger_DeleteVmImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVmImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmImageMangerServer).DeleteVmImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmImageManger/DeleteVmImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmImageMangerServer).DeleteVmImage(ctx, req.(*DeleteVmImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmImageManger_ImportVmImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportVmImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmImageMangerServer).ImportVmImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmImageManger/ImportVmImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmImageMangerServer).ImportVmImage(ctx, req.(*ImportVmImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmImageManger_QueryVmImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVmImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmImageMangerServer).QueryVmImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmImageManger/QueryVmImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmImageMangerServer).QueryVmImage(ctx, req.(*QueryVmImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VmImageManger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resservice.VmImageManger",
	HandlerType: (*VmImageMangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createVmImage",
			Handler:    _VmImageManger_CreateVmImage_Handler,
		},
		{
			MethodName: "deleteVmImage",
			Handler:    _VmImageManger_DeleteVmImage_Handler,
		},
		{
			MethodName: "importVmImage",
			Handler:    _VmImageManger_ImportVmImage_Handler,
		},
		{
			MethodName: "queryVmImage",
			Handler:    _VmImageManger_QueryVmImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resservice.proto",
}

// VmManagerClient is the client API for VmManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VmManagerClient interface {
	CreateVm(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*CreateVmResponse, error)
	QueryVm(ctx context.Context, in *QueryVmRequest, opts ...grpc.CallOption) (*QueryVmResponse, error)
	OperateVm(ctx context.Context, in *OperateVmRequest, opts ...grpc.CallOption) (*OperateVmResponse, error)
	DeleteVm(ctx context.Context, in *DeleteVmRequest, opts ...grpc.CallOption) (*DeleteVmResponse, error)
}

type vmManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewVmManagerClient(cc grpc.ClientConnInterface) VmManagerClient {
	return &vmManagerClient{cc}
}

func (c *vmManagerClient) CreateVm(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*CreateVmResponse, error) {
	out := new(CreateVmResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmManager/createVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmManagerClient) QueryVm(ctx context.Context, in *QueryVmRequest, opts ...grpc.CallOption) (*QueryVmResponse, error) {
	out := new(QueryVmResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmManager/queryVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmManagerClient) OperateVm(ctx context.Context, in *OperateVmRequest, opts ...grpc.CallOption) (*OperateVmResponse, error) {
	out := new(OperateVmResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmManager/operateVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmManagerClient) DeleteVm(ctx context.Context, in *DeleteVmRequest, opts ...grpc.CallOption) (*DeleteVmResponse, error) {
	out := new(DeleteVmResponse)
	err := c.cc.Invoke(ctx, "/resservice.VmManager/deleteVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmManagerServer is the server API for VmManager service.
type VmManagerServer interface {
	CreateVm(context.Context, *CreateVmRequest) (*CreateVmResponse, error)
	QueryVm(context.Context, *QueryVmRequest) (*QueryVmResponse, error)
	OperateVm(context.Context, *OperateVmRequest) (*OperateVmResponse, error)
	DeleteVm(context.Context, *DeleteVmRequest) (*DeleteVmResponse, error)
}

// UnimplementedVmManagerServer can be embedded to have forward compatible implementations.
type UnimplementedVmManagerServer struct {
}

func (*UnimplementedVmManagerServer) CreateVm(context.Context, *CreateVmRequest) (*CreateVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVm not implemented")
}
func (*UnimplementedVmManagerServer) QueryVm(context.Context, *QueryVmRequest) (*QueryVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVm not implemented")
}
func (*UnimplementedVmManagerServer) OperateVm(context.Context, *OperateVmRequest) (*OperateVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateVm not implemented")
}
func (*UnimplementedVmManagerServer) DeleteVm(context.Context, *DeleteVmRequest) (*DeleteVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVm not implemented")
}

func RegisterVmManagerServer(s *grpc.Server, srv VmManagerServer) {
	s.RegisterService(&_VmManager_serviceDesc, srv)
}

func _VmManager_CreateVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmManagerServer).CreateVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmManager/CreateVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmManagerServer).CreateVm(ctx, req.(*CreateVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmManager_QueryVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmManagerServer).QueryVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmManager/QueryVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmManagerServer).QueryVm(ctx, req.(*QueryVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmManager_OperateVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmManagerServer).OperateVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmManager/OperateVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmManagerServer).OperateVm(ctx, req.(*OperateVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmManager_DeleteVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmManagerServer).DeleteVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.VmManager/DeleteVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmManagerServer).DeleteVm(ctx, req.(*DeleteVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VmManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resservice.VmManager",
	HandlerType: (*VmManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createVm",
			Handler:    _VmManager_CreateVm_Handler,
		},
		{
			MethodName: "queryVm",
			Handler:    _VmManager_QueryVm_Handler,
		},
		{
			MethodName: "operateVm",
			Handler:    _VmManager_OperateVm_Handler,
		},
		{
			MethodName: "deleteVm",
			Handler:    _VmManager_DeleteVm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resservice.proto",
}

// FlavorManagerClient is the client API for FlavorManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlavorManagerClient interface {
	CreateFlavor(ctx context.Context, in *CreateFlavorRequest, opts ...grpc.CallOption) (*CreateFlavorResponse, error)
	DeleteFlavor(ctx context.Context, in *DeleteFlavorRequest, opts ...grpc.CallOption) (*DeleteFlavorResponse, error)
	QueryFlavor(ctx context.Context, in *QueryFlavorRequest, opts ...grpc.CallOption) (*QueryFlavorResponse, error)
}

type flavorManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFlavorManagerClient(cc grpc.ClientConnInterface) FlavorManagerClient {
	return &flavorManagerClient{cc}
}

func (c *flavorManagerClient) CreateFlavor(ctx context.Context, in *CreateFlavorRequest, opts ...grpc.CallOption) (*CreateFlavorResponse, error) {
	out := new(CreateFlavorResponse)
	err := c.cc.Invoke(ctx, "/resservice.FlavorManager/createFlavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flavorManagerClient) DeleteFlavor(ctx context.Context, in *DeleteFlavorRequest, opts ...grpc.CallOption) (*DeleteFlavorResponse, error) {
	out := new(DeleteFlavorResponse)
	err := c.cc.Invoke(ctx, "/resservice.FlavorManager/deleteFlavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flavorManagerClient) QueryFlavor(ctx context.Context, in *QueryFlavorRequest, opts ...grpc.CallOption) (*QueryFlavorResponse, error) {
	out := new(QueryFlavorResponse)
	err := c.cc.Invoke(ctx, "/resservice.FlavorManager/queryFlavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlavorManagerServer is the server API for FlavorManager service.
type FlavorManagerServer interface {
	CreateFlavor(context.Context, *CreateFlavorRequest) (*CreateFlavorResponse, error)
	DeleteFlavor(context.Context, *DeleteFlavorRequest) (*DeleteFlavorResponse, error)
	QueryFlavor(context.Context, *QueryFlavorRequest) (*QueryFlavorResponse, error)
}

// UnimplementedFlavorManagerServer can be embedded to have forward compatible implementations.
type UnimplementedFlavorManagerServer struct {
}

func (*UnimplementedFlavorManagerServer) CreateFlavor(context.Context, *CreateFlavorRequest) (*CreateFlavorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlavor not implemented")
}
func (*UnimplementedFlavorManagerServer) DeleteFlavor(context.Context, *DeleteFlavorRequest) (*DeleteFlavorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlavor not implemented")
}
func (*UnimplementedFlavorManagerServer) QueryFlavor(context.Context, *QueryFlavorRequest) (*QueryFlavorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFlavor not implemented")
}

func RegisterFlavorManagerServer(s *grpc.Server, srv FlavorManagerServer) {
	s.RegisterService(&_FlavorManager_serviceDesc, srv)
}

func _FlavorManager_CreateFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlavorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlavorManagerServer).CreateFlavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.FlavorManager/CreateFlavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlavorManagerServer).CreateFlavor(ctx, req.(*CreateFlavorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlavorManager_DeleteFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlavorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlavorManagerServer).DeleteFlavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.FlavorManager/DeleteFlavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlavorManagerServer).DeleteFlavor(ctx, req.(*DeleteFlavorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlavorManager_QueryFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlavorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlavorManagerServer).QueryFlavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.FlavorManager/QueryFlavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlavorManagerServer).QueryFlavor(ctx, req.(*QueryFlavorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlavorManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resservice.FlavorManager",
	HandlerType: (*FlavorManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createFlavor",
			Handler:    _FlavorManager_CreateFlavor_Handler,
		},
		{
			MethodName: "deleteFlavor",
			Handler:    _FlavorManager_DeleteFlavor_Handler,
		},
		{
			MethodName: "queryFlavor",
			Handler:    _FlavorManager_QueryFlavor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resservice.proto",
}

// NetworkManagerClient is the client API for NetworkManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkManagerClient interface {
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error)
	QueryNetwork(ctx context.Context, in *QueryNetworkRequest, opts ...grpc.CallOption) (*QueryNetworkResponse, error)
}

type networkManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkManagerClient(cc grpc.ClientConnInterface) NetworkManagerClient {
	return &networkManagerClient{cc}
}

func (c *networkManagerClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	out := new(CreateNetworkResponse)
	err := c.cc.Invoke(ctx, "/resservice.NetworkManager/createNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagerClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error) {
	out := new(DeleteNetworkResponse)
	err := c.cc.Invoke(ctx, "/resservice.NetworkManager/deleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkManagerClient) QueryNetwork(ctx context.Context, in *QueryNetworkRequest, opts ...grpc.CallOption) (*QueryNetworkResponse, error) {
	out := new(QueryNetworkResponse)
	err := c.cc.Invoke(ctx, "/resservice.NetworkManager/queryNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkManagerServer is the server API for NetworkManager service.
type NetworkManagerServer interface {
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error)
	QueryNetwork(context.Context, *QueryNetworkRequest) (*QueryNetworkResponse, error)
}

// UnimplementedNetworkManagerServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkManagerServer struct {
}

func (*UnimplementedNetworkManagerServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (*UnimplementedNetworkManagerServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (*UnimplementedNetworkManagerServer) QueryNetwork(context.Context, *QueryNetworkRequest) (*QueryNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNetwork not implemented")
}

func RegisterNetworkManagerServer(s *grpc.Server, srv NetworkManagerServer) {
	s.RegisterService(&_NetworkManager_serviceDesc, srv)
}

func _NetworkManager_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagerServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.NetworkManager/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagerServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManager_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagerServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.NetworkManager/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagerServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkManager_QueryNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagerServer).QueryNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.NetworkManager/QueryNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagerServer).QueryNetwork(ctx, req.(*QueryNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resservice.NetworkManager",
	HandlerType: (*NetworkManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNetwork",
			Handler:    _NetworkManager_CreateNetwork_Handler,
		},
		{
			MethodName: "deleteNetwork",
			Handler:    _NetworkManager_DeleteNetwork_Handler,
		},
		{
			MethodName: "queryNetwork",
			Handler:    _NetworkManager_QueryNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resservice.proto",
}

// SecurityGroupManagerClient is the client API for SecurityGroupManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecurityGroupManagerClient interface {
	CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupRequest, opts ...grpc.CallOption) (*CreateSecurityGroupResponse, error)
	DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupResponse, error)
	QuerySecurityGroup(ctx context.Context, in *QuerySecurityGroupRequest, opts ...grpc.CallOption) (*QuerySecurityGroupResponse, error)
	CreateSecurityGroupRule(ctx context.Context, in *CreateSecurityGroupRuleRequest, opts ...grpc.CallOption) (*CreateSecurityGroupRuleResponse, error)
	DeleteSecurityGroupRule(ctx context.Context, in *DeleteSecurityGroupRuleRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupRuleResponse, error)
	QuerySecurityGroupRule(ctx context.Context, in *QuerySecurityGroupRuleRequest, opts ...grpc.CallOption) (*QuerySecurityGroupRuleResponse, error)
}

type securityGroupManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityGroupManagerClient(cc grpc.ClientConnInterface) SecurityGroupManagerClient {
	return &securityGroupManagerClient{cc}
}

func (c *securityGroupManagerClient) CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupRequest, opts ...grpc.CallOption) (*CreateSecurityGroupResponse, error) {
	out := new(CreateSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/resservice.SecurityGroupManager/createSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupManagerClient) DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupResponse, error) {
	out := new(DeleteSecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/resservice.SecurityGroupManager/deleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupManagerClient) QuerySecurityGroup(ctx context.Context, in *QuerySecurityGroupRequest, opts ...grpc.CallOption) (*QuerySecurityGroupResponse, error) {
	out := new(QuerySecurityGroupResponse)
	err := c.cc.Invoke(ctx, "/resservice.SecurityGroupManager/querySecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupManagerClient) CreateSecurityGroupRule(ctx context.Context, in *CreateSecurityGroupRuleRequest, opts ...grpc.CallOption) (*CreateSecurityGroupRuleResponse, error) {
	out := new(CreateSecurityGroupRuleResponse)
	err := c.cc.Invoke(ctx, "/resservice.SecurityGroupManager/createSecurityGroupRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupManagerClient) DeleteSecurityGroupRule(ctx context.Context, in *DeleteSecurityGroupRuleRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupRuleResponse, error) {
	out := new(DeleteSecurityGroupRuleResponse)
	err := c.cc.Invoke(ctx, "/resservice.SecurityGroupManager/deleteSecurityGroupRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupManagerClient) QuerySecurityGroupRule(ctx context.Context, in *QuerySecurityGroupRuleRequest, opts ...grpc.CallOption) (*QuerySecurityGroupRuleResponse, error) {
	out := new(QuerySecurityGroupRuleResponse)
	err := c.cc.Invoke(ctx, "/resservice.SecurityGroupManager/querySecurityGroupRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityGroupManagerServer is the server API for SecurityGroupManager service.
type SecurityGroupManagerServer interface {
	CreateSecurityGroup(context.Context, *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error)
	DeleteSecurityGroup(context.Context, *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error)
	QuerySecurityGroup(context.Context, *QuerySecurityGroupRequest) (*QuerySecurityGroupResponse, error)
	CreateSecurityGroupRule(context.Context, *CreateSecurityGroupRuleRequest) (*CreateSecurityGroupRuleResponse, error)
	DeleteSecurityGroupRule(context.Context, *DeleteSecurityGroupRuleRequest) (*DeleteSecurityGroupRuleResponse, error)
	QuerySecurityGroupRule(context.Context, *QuerySecurityGroupRuleRequest) (*QuerySecurityGroupRuleResponse, error)
}

// UnimplementedSecurityGroupManagerServer can be embedded to have forward compatible implementations.
type UnimplementedSecurityGroupManagerServer struct {
}

func (*UnimplementedSecurityGroupManagerServer) CreateSecurityGroup(context.Context, *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityGroup not implemented")
}
func (*UnimplementedSecurityGroupManagerServer) DeleteSecurityGroup(context.Context, *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (*UnimplementedSecurityGroupManagerServer) QuerySecurityGroup(context.Context, *QuerySecurityGroupRequest) (*QuerySecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySecurityGroup not implemented")
}
func (*UnimplementedSecurityGroupManagerServer) CreateSecurityGroupRule(context.Context, *CreateSecurityGroupRuleRequest) (*CreateSecurityGroupRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityGroupRule not implemented")
}
func (*UnimplementedSecurityGroupManagerServer) DeleteSecurityGroupRule(context.Context, *DeleteSecurityGroupRuleRequest) (*DeleteSecurityGroupRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityGroupRule not implemented")
}
func (*UnimplementedSecurityGroupManagerServer) QuerySecurityGroupRule(context.Context, *QuerySecurityGroupRuleRequest) (*QuerySecurityGroupRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySecurityGroupRule not implemented")
}

func RegisterSecurityGroupManagerServer(s *grpc.Server, srv SecurityGroupManagerServer) {
	s.RegisterService(&_SecurityGroupManager_serviceDesc, srv)
}

func _SecurityGroupManager_CreateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupManagerServer).CreateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.SecurityGroupManager/CreateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupManagerServer).CreateSecurityGroup(ctx, req.(*CreateSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupManager_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupManagerServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.SecurityGroupManager/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupManagerServer).DeleteSecurityGroup(ctx, req.(*DeleteSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupManager_QuerySecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupManagerServer).QuerySecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.SecurityGroupManager/QuerySecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupManagerServer).QuerySecurityGroup(ctx, req.(*QuerySecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupManager_CreateSecurityGroupRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityGroupRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupManagerServer).CreateSecurityGroupRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.SecurityGroupManager/CreateSecurityGroupRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupManagerServer).CreateSecurityGroupRule(ctx, req.(*CreateSecurityGroupRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupManager_DeleteSecurityGroupRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityGroupRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupManagerServer).DeleteSecurityGroupRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.SecurityGroupManager/DeleteSecurityGroupRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupManagerServer).DeleteSecurityGroupRule(ctx, req.(*DeleteSecurityGroupRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupManager_QuerySecurityGroupRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySecurityGroupRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupManagerServer).QuerySecurityGroupRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resservice.SecurityGroupManager/QuerySecurityGroupRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupManagerServer).QuerySecurityGroupRule(ctx, req.(*QuerySecurityGroupRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecurityGroupManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resservice.SecurityGroupManager",
	HandlerType: (*SecurityGroupManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSecurityGroup",
			Handler:    _SecurityGroupManager_CreateSecurityGroup_Handler,
		},
		{
			MethodName: "deleteSecurityGroup",
			Handler:    _SecurityGroupManager_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "querySecurityGroup",
			Handler:    _SecurityGroupManager_QuerySecurityGroup_Handler,
		},
		{
			MethodName: "createSecurityGroupRule",
			Handler:    _SecurityGroupManager_CreateSecurityGroupRule_Handler,
		},
		{
			MethodName: "deleteSecurityGroupRule",
			Handler:    _SecurityGroupManager_DeleteSecurityGroupRule_Handler,
		},
		{
			MethodName: "querySecurityGroupRule",
			Handler:    _SecurityGroupManager_QuerySecurityGroupRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resservice.proto",
}
